/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ConditionalTokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalTokens__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "LMSRMarketMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LMSRMarketMaker__factory>;
    getContractFactory(
      name: "LMSRMarketMakerData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LMSRMarketMakerData__factory>;
    getContractFactory(
      name: "LMSRMarketMakerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LMSRMarketMakerFactory__factory>;
    getContractFactory(
      name: "MarketMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketMaker__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "ConstructedCloneFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstructedCloneFactory__factory>;
    getContractFactory(
      name: "Fixed192x64Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fixed192x64Math__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;

    getContractAt(
      name: "ConditionalTokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalTokens>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155TokenReceiver>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;
    getContractAt(
      name: "LMSRMarketMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LMSRMarketMaker>;
    getContractAt(
      name: "LMSRMarketMakerData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LMSRMarketMakerData>;
    getContractAt(
      name: "LMSRMarketMakerFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LMSRMarketMakerFactory>;
    getContractAt(
      name: "MarketMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketMaker>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;
    getContractAt(
      name: "ConstructedCloneFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstructedCloneFactory>;
    getContractAt(
      name: "Fixed192x64Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fixed192x64Math>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
